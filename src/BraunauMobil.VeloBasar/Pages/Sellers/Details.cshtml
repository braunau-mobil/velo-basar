@page
@model DetailsModel

@{
    ViewData["Title"] = Localizer["Verkäufer"];
}

<div class="card my-3">
    <div class="card-header d-flex justify-content-between align-items-md-center">
        <div class="mr-auto"><h5>#@Model.Seller.Id @Html.DisplayFor(model => model.Seller.FirstName) @Html.DisplayFor(model => model.Seller.LastName)</h5></div>
        <div class="d-flex justify-content-end">
            <a velo-page="@Model.GetStartAcceptancePage()" class="btn btn-primary mx-1">@Localizer["Artikel annehmen"]</a>
            @if (Model.Seller.ValueState == ValueState.NotSettled)
            {
                <a velo-page="@Model.GetCreateSettlementPage()" class="btn btn-primary mx-1">@Localizer["Abrechnen"]</a>
            }
            <a velo-page="@Model.GetPrintLablesPage()" target="_blank" class="btn btn-primary mx-1">@Localizer["Etiketten drucken"]</a>
            <a velo-page="@Model.GetEditPage()" class="btn btn-secondary mx-1">@Localizer["Bearbeiten"]</a>
        </div>

    </div>

    <div class="card-body">
        <div class="row">
            <div class="col">
                <h5 class="card-title">@Localizer["Anschrift"]</h5>
                <p class="card-text">
                    <partial name="/Pages/Sellers/_Address.cshtml" model="@Model.Seller" />
                </p>
                <h5 class="card-title">@Localizer["Bankdaten"]</h5>
                <p class="card-text">
                    @Html.DisplayNameFor(model => model.Seller.IBAN):
                    @Html.DisplayFor(model => model.Seller.IBAN)<br />
                    @Html.DisplayNameFor(model => model.Seller.BankAccountHolder):
                    @Html.DisplayFor(model => model.Seller.BankAccountHolder)<br />
                </p>
                <h5 class="card-title">@Localizer["Sonstiges"]</h5>
                <p class="card-text">
                    @Html.DisplayNameFor(model => model.Seller.PhoneNumber):
                    @Html.DisplayFor(model => model.Seller.PhoneNumber)<br />

                    @if (Model.Seller.HasNewsletterPermission)
                    {
                        @Html.DisplayNameFor(model => model.Seller.EMail)
                        @Html.Raw(":&nbsp;");
                        @Html.DisplayFor(model => model.Seller.EMail)<br />
                        @Html.DisplayNameFor(model => model.Seller.NewsletterPermissionTimesStamp)
                        @Html.Raw(":&nbsp;");
                        @Html.DisplayFor(model => model.Seller.NewsletterPermissionTimesStamp)<br />
                    }

                    @Html.DisplayNameFor(model => model.Seller.Token):
                    @Html.DisplayFor(model => model.Seller.Token)<br />
                </p>
                <h5 class="card-title" Condition="!string.IsNullOrEmpty(Model.Seller.Comment)">@Html.DisplayNameFor(model => model.Seller.Comment)</h5>
                <p class="card-text" Condition="!string.IsNullOrEmpty(Model.Seller.Comment)">
                    @Html.DisplayFor(model => model.Seller.Comment)
                </p>
            </div>
            <div class="col">
                <ul class="list-group">
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        @Html.DisplayNameFor(model => model.Stats.AceptedProductCount)
                        <span class="badge badge-success badge-pill">@Html.DisplayFor(model => model.Stats.AceptedProductCount)</span>
                    </li>
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        @Html.DisplayNameFor(model => model.Stats.SoldProductCount)
                        <span class="badge badge-success badge-pill">@Html.DisplayFor(model => model.Stats.SoldProductCount)</span>
                    </li>
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        @Html.DisplayNameFor(model => model.Stats.NotSoldProductCount)
                        <span class="badge badge-warning badge-pill">@Html.DisplayFor(model => model.Stats.NotSoldProductCount)</span>
                    </li>
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        @Html.DisplayNameFor(model => model.Stats.PickedUpProductCount)
                        <span class="badge badge-secondary badge-pill">@Html.DisplayFor(model => model.Stats.PickedUpProductCount)</span>
                    </li>
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        @Html.DisplayNameFor(model => model.Stats.SettlementAmout)
                        <span class="badge badge-primary badge-pill">@Html.DisplayFor(model => model.Stats.SettlementAmout)</span>
                    </li>
                </ul>
            </div>
        </div>
    </div>
</div>

<div class="card my-3">
    <h5 class="card-header">@Localizer["Artikel"]</h5>
    <div class="card-body p-0">
        <partial Condition="Model.Products.NotEmpty" name="/Pages/Products/_ProductsView.cshtml" model="Model.Products" />
    </div>
</div>

<div class="card my-3">
    <h5 class="card-header">@Localizer["Annahmen"]</h5>
    <div class="card-body p-0">
        <partial Condition="Model.Acceptances.NotEmpty" name="/Pages/Transactions/_TransactionsView.cshtml" model="@Model.Acceptances" />
    </div>
</div>


<div class="card my-3">
    <h5 class="card-header">@Localizer["Abrechnungen"]</h5>
    <div class="card-body p-0">
        <partial Condition="Model.Settlements.NotEmpty" name="/Pages/Transactions/_TransactionsView.cshtml" model="@Model.Settlements" />
    </div>
</div>
