@model SellerEntity
@inject ISelectListService SelectLists
@{
    string zipInputName = nameof(Model.ZIP);
    string cityInputName = nameof(Model.City);
    string countrySelectName = nameof(Model.CountryId);
}

@VeloHtml.HiddenInputs(Model);
@VeloHtml.HiddenInput(nameof(Model.Token), Model.Token)
@VeloHtml.HiddenInput(nameof(Model.ValueState), (int)Model.ValueState)

<div class="row">
    <div class="col-2">@VeloHtml.SelectField(countrySelectName, Model.CountryId, await SelectLists.CountriesAsync(), Localizer[VeloTexts.Country])</div>
    <div class="col-2">@VeloHtml.TextInputField(zipInputName, Model.ZIP, Localizer[VeloTexts.ZIP])</div>
    <div class="col-8">@VeloHtml.TextInputField(cityInputName, Model.City, Localizer[VeloTexts.City])</div>
</div>

@VeloHtml.TextInputField(nameof(Model.Street), Model.Street, Localizer[VeloTexts.Street])

<div class="row">
    <div class="col">@VeloHtml.PhoneNumberInputField(nameof(Model.PhoneNumber), Model.PhoneNumber, Localizer[VeloTexts.PhoneNumber])</div>
    <div class="col">@VeloHtml.EmailInputField(nameof(Model.EMail), Model.EMail, Localizer[VeloTexts.EMail])</div>
</div>

@VeloHtml.CheckBoxField(nameof(Model.HasNewsletterPermission), Model.HasNewsletterPermission, Localizer[VeloTexts.NewsletterPermission])
@VeloHtml.TextInputField(nameof(Model.IBAN), Model.IBAN, Localizer[VeloTexts.IBAN])
@VeloHtml.TextInputField(nameof(Model.BankAccountHolder), Model.BankAccountHolder, Localizer[VeloTexts.BankAccountHolder])

<script>
    document.getElementById("@VeloHtml.Id(zipInputName)").addEventListener("focusout", handleZipChanged);

    function handleZipChanged() {
        if (document.getElementById("@VeloHtml.Id(cityInputName)").value) {
            return;
        }
        var zip = document.getElementById("@VeloHtml.Id(zipInputName)").value;
        var countryId = document.getElementById("@VeloHtml.Id(countrySelectName)").value;
        var country = getCity(countryId, zip);
        if (country !== undefined) {
            document.getElementById("@VeloHtml.Id(cityInputName)").value = country;
        }
    }
    function getCity(countryId, zip) {
        var map = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(await SelectLists.ZipCodeMapAsync()));
        return map[countryId][zip];
    }
</script>
