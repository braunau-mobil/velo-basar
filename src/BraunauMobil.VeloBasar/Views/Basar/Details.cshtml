@model BasarDetailsModel

@{
    ViewData.SetTitle(Localizer[VeloTexts.BasarDetails]);
}

<div class="card m-2">
    <div class="card-header">
        <div class="row align-items-center">
            <h5 class="col text-start">@Model.Entity.Date.ToLongDateString()</h5>
            <h4 class="col text-center">@Model.Entity.Name</h4>
            <h5 class="col text-end">@Model.Entity.Location</h5>
        </div>
    </div>
    <div class="card-body">
        <div class="row justify-content-evenly align-items-center">
            <h4 class="col-auto m-0">@Localizer[VeloTexts.AcceptancesCount, Model.AcceptanceCount]</h4>
            <h4 class="col-auto m-0">@Localizer[VeloTexts.SaleCount, Model.SaleCount]</h4>
            <h4 class="col-auto m-0">@Localizer[VeloTexts.SellerCount, Model.SellerCount]</h4>
            <h4 class="col-auto m-0">@Localizer[VeloTexts.LostProducts, Model.LostProductsCount]</h4>
            <h4 class="col-auto m-0">@Localizer[VeloTexts.LockedProductsCount, Model.LockedProductsCount]</h4>
        </div>
    </div>
</div>

@if (Model.SettlementStatus.HasSettlementStarted)
{
    <div class="card m-2">
        <div class="card-header">
            @Localizer[VeloTexts.SettlementProgress]
        </div>

        <div class="card-body">
            <h6>@Localizer[VeloTexts.NotSettledCount, @Model.SettlementStatus.OverallNotSettledCount]</h6>
            <h6 class="mt-3 ms-4">@Localizer[VeloTexts.OnSiteWithCount, @Model.SettlementStatus.OnSiteCount]</h6>
            <h6 class="mt-3 ms-4">@Localizer[VeloTexts.RemoteWithCount, @Model.SettlementStatus.RemoteCount]</h6>
        </div>
    </div>
}

<div class="row">
    <div class="col">
        <div class="card m-2">
            <div class="card-header">@Localizer[VeloTexts.AcceptedProductsWithCount, Model.AcceptedProductsCount]</div>
            <div class="card-body">
                <canvas class="pie-chart" id="AcceptedProductTypesByCountChartArea"></canvas>
            </div>
        </div>
    </div>
    <div class="col">
        <div class="card m-2">
            <div class="card-header">@Localizer[VeloTexts.SoldProductsCount, Model.SoldProductsCount]</div>
            <div class="card-body">
                <canvas class="pie-chart" id="SoldProductTypesByCountChartArea"></canvas>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col">
        <div class="card m-2">
            <div class="card-header">@Localizer[VeloTexts.AcceptedProductsAmount, Model.AcceptedProductsAmount]</div>
            <div class="card-body">
                <canvas class="pie-chart" id="AcceptedProductTypesByAmountChartArea"></canvas>
            </div>
        </div>
    </div>
    <div class="col">
        <div class="card m-2">
            <div class="card-header">@Localizer[VeloTexts.SoldProductsAmount, Model.SoldProductsAmount]</div>
            <div class="card-body">
                <canvas class="pie-chart" id="SoldProductTypesByAmountChartArea"></canvas>
            </div>
        </div>
    </div>
</div>

<div class="card m-2">
    <div class="card-header">@Localizer[VeloTexts.PriceDistribution]</div>
    <div class="card-body"><canvas id="PriceDistributionChartArea"></canvas></div>
</div>

<div class="card m-2">
    <div class="card-header">@Localizer[VeloTexts.SaleDistribution]</div>
    <div class="card-body"><canvas id="SaleDistributionChartArea"></canvas></div>
</div>

@section Scripts {
    <script src="~/lib/chartjs/js/chart.umd.js" asp-append-version="true"></script>
    <script>
        function renderData(id, config) {
            var ctx = document.getElementById(id).getContext('2d');
            window.myPie = new Chart(ctx, config);
        }

        window.onload = function () {
            renderData('AcceptedProductTypesByCountChartArea', @Html.Raw(JsonUtils.GetDonutConfig(Model.AcceptedProductTypesByCount)));
            renderData('AcceptedProductTypesByAmountChartArea', @Html.Raw(JsonUtils.GetDonutConfig(Model.AcceptedProductTypesByAmount)));
            renderData('SoldProductTypesByCountChartArea', @Html.Raw(JsonUtils.GetDonutConfig(Model.SoldProductTypesByCount)));
            renderData('SoldProductTypesByAmountChartArea', @Html.Raw(JsonUtils.GetDonutConfig(Model.SoldProductTypesByAmount)));
            renderData('PriceDistributionChartArea', @Html.Raw(JsonUtils.GetBarConfig(Model.PriceDistribution, Localizer[VeloTexts.PriceDistribution], true)));
            renderData('SaleDistributionChartArea', @Html.Raw(JsonUtils.GetLineConfig(Model.SaleDistribution, Localizer[VeloTexts.SaleDistribution], false)));
        };
    </script>
}
